{"version":3,"sources":["services/entries.js","Components/AddEntry.js","Components/RenderPhoneNumbers.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","AddEntry","name","nameHandler","num","numHandler","persons","setPersons","onSubmit","event","entry","preventDefault","number","every","person","entryService","then","response","concat","data","alert","value","onChange","type","RenderPhoneNumbers","query","deleteEntry","filter","toLowerCase","indexOf","map","key","onClick","App","useState","newName","setNewName","newNumber","setNewNumber","newQuery","setNewQuery","useEffect","target","find","p","window","confirm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a15a19f.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n  }\r\n\r\n  const del = (id) => {\r\n      return axios.delete(`${baseUrl}/${id}`)\r\n  }\r\n  \r\nexport default { getAll, create, update, del}","import React from 'react'\r\nimport entryService from '../services/entries'\r\n\r\nconst AddEntry = ({name, nameHandler, num, numHandler, persons, setPersons}) => {\r\n    \r\n    const checkEntry = (entry) => {\r\n      if (entry.number && entry.name){\r\n        persons.every(person => person.name !== entry.name) \r\n        ? entryService\r\n            .create(entry)\r\n            .then(response => {\r\n              setPersons(persons.concat(response.data))\r\n            })\r\n        : alert(`${entry.name} is already in phonebook`)\r\n      } else {\r\n        alert(\"Incomplete information provided\")\r\n      }\r\n    }\r\n  \r\n    const addName = (event) => {\r\n      event.preventDefault()\r\n  \r\n      const entryObject = {\r\n        name: name,\r\n        number: num\r\n      }\r\n    \r\n      checkEntry(entryObject)\r\n    }\r\n  \r\n    return(\r\n    <form onSubmit={addName}>\r\n      <div>\r\n        name: <input\r\n          value={name}\r\n          onChange={nameHandler}\r\n      />\r\n      </div>\r\n      <div>\r\n        number: <input \r\n          type=\"tel\"\r\n          value={num}\r\n          onChange={numHandler}\r\n      />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>)\r\n  }\r\n\r\n  export default AddEntry","import React from 'react'\r\n\r\nconst RenderPhoneNumbers = ({persons, query, deleteEntry}) => {\r\n    return persons.filter(person => \r\n      person.name.toLowerCase().indexOf(query.toLowerCase()) !== -1)\r\n      .map(person => \r\n        <div key={person.name}>\r\n          <p>{person.name}  #{person.number}</p>\r\n          <button onClick={() => deleteEntry(person.name)}>Delete</button>\r\n        </div>)\r\n  }\r\n\r\n  export default RenderPhoneNumbers","import React, { useState, useEffect } from 'react'\nimport AddEntry from './Components/AddEntry'\nimport RenderPhoneNumbers from './Components/RenderPhoneNumbers'\nimport entryService from './services/entries'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ newQuery, setNewQuery] = useState('')\n\n  useEffect(() => {\n    entryService\n      .getAll()\n      .then(response => \n        setPersons(response.data))\n  }, [])\n\n  const deleteEntry = (id) => {\n    const entry = persons.find(p => p.name === id)\n    let check = window.confirm(`Are you sure you want to delete ${id}?`)\n\n    if(check) {\n      entryService\n        .del(entry.id)\n        .then(() =>{\n          setPersons(persons.filter(p => p.name !== id))\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleQueryChange = (event) => {\n    setNewQuery(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      search phonebook: <input \n        value={newQuery}\n        onChange={handleQueryChange}\n      />\n      <h2>Add Entry:</h2>\n      <AddEntry \n        name={newName}\n        nameHandler={handleNameChange}\n        num={newNumber}\n        numHandler={handleNumberChange} \n        persons={persons}\n        setPersons={setPersons}/>\n      <h2>Numbers</h2>\n      <RenderPhoneNumbers \n        persons={persons}\n        query={newQuery} \n        deleteEntry={deleteEntry} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}